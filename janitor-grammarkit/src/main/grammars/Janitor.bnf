// BNF grammar for Janitor language,
// converted from Janitor.g4 by GitHub Copilot.
// This might be a slew of gibberish. We'll see.

// Next steps: https://github.com/JetBrains/Grammar-Kit

{
  // Define token types
  tokens=[
    FUNCTION="function",
    BREAK="break",
    CATCH="catch",
    CONTINUE="continue",
    DO="do",
    ELSE="else",
    FINALLY="finally",
    FOR="for",
    IF="if",
    THEN="then",
    IMPORT="import",
    RETURN="return",
    THROW="throw",
    TRY="try",
    WHILE="while",
    TRUE="true",
    FALSE="false",
    NULL="null",
    FROM="from",
    TO="to",
    IN="in",
    DECIMAL_LITERAL="[0-9]+",
    HEX_LITERAL="0[xX][0-9a-fA-F]+",
    OCT_LITERAL="0[0-7]+",
    BINARY_LITERAL="0[bB][01]+",
    FLOAT_LITERAL="[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?",
    DATE_LITERAL="@\\d{4}-\\d{2}-\\d{2}",
    DATE_TIME_LITERAL="@\\d{4}-\\d{2}-\\d{2}-\\d{2}:\\d{2}(:\\d{2})?",
    YEARS_LITERAL="@\\d+y",
    MONTHS_LITERAL="@\\d+mo",
    WEEKS_LITERAL="@\\d+w",
    DAYS_LITERAL="@\\d+d",
    HOURS_LITERAL="@\\d+h",
    MINUTES_LITERAL="@\\d+mi",
    SECONDS_LITERAL="@\\d+s",
    TODAY_LITERAL="@today",
    NOW_LITERAL="@now",
    STRING_LITERAL_SINGLE="'([^'\\\\]|\\\\.)*'",
    STRING_LITERAL_DOUBLE="\"([^\"\\\\]|\\\\.)*\"",
    STRING_LITERAL_TRIPLE_SINGLE="'''([^\\\\]|\\\\.)*?'''",
    STRING_LITERAL_TRIPLE_DOUBLE="\"\"\"([^\\\\]|\\\\.)*?\"\"\"",
    REGEX_LITERAL="re/([^/\\\\]|\\\\.)*/",
    LPAREN="\\(",
    RPAREN="\\)",
    LBRACE="\\{",
    RBRACE="\\}",
    LBRACK="\\[",
    RBRACK="\\]",
    STMT_TERM=";",
    SEMICOLON=";",
    COMMA=",",
    DOUBLE_DOT="..",
    DOT=".",
    QDOT="\\?.",
    HASH="#",
    ALT_CATCH="|",
    ASSIGN="=",
    PLUS_ASSIGN="\\+=",
    MINUS_ASSIGN="-=",
    MUL_ASSIGN="\\*=",
    DIV_ASSIGN="/=",
    MOD_ASSIGN="%=",
    GT=">",
    LT="<",
    MATCH="~",
    MATCH_NOT="!~",
    QUESTION="\\?",
    COLON=":",
    EQUAL="==",
    LE="<=",
    GE=">=",
    NOTEQUAL="!=",
    ALT_NOTEQUAL="<>",
    NOT="not",
    ALT_NOT="!",
    AND="and",
    CAND="&&",
    OR="or",
    COR="\\|\\|",
    INC="\\+\\+",
    DEC="--",
    ADD="\\+",
    SUB="-",
    MUL="\\*",
    DIV="/",
    MOD="%",
    ARROW="->",
    WS="[ \\t\\u000C]+",
    COMMENT="/\\*[^*]*\\*+(?:[^/*][^*]*\\*+)*/",
    LINE_COMMENT="//[^\\r\\n]*",
    NEWLINE="[\\r\\n]+",
    IDENTIFIER="[a-zA-Z$_][a-zA-Z0-9$_]*"
  ]
}

script ::= topLevelStatement*;

topLevelStatement ::= importStatement | blockStatement;

importStatement ::= IMPORT importClause (COMMA importClause)* STMT_TERM;

importClause ::= qualifiedName ('as' importAlias)? | STRING_LITERAL_SINGLE 'as' importAlias | STRING_LITERAL_DOUBLE 'as' importAlias;

blockStatement ::= block | ifStatementDef | FOR LPAREN validIdentifier IN expression RPAREN block | FOR LPAREN validIdentifier FROM expression TO expression RPAREN block | WHILE LPAREN expression RPAREN block | DO block WHILE LPAREN expression RPAREN STMT_TERM | TRY block (catchClause? finallyBlock? | finallyBlock) | RETURN expression? STMT_TERM | THROW expression STMT_TERM | BREAK STMT_TERM | CONTINUE STMT_TERM | expression STMT_TERM | functionDeclaration;

ifStatementDef ::= IF LPAREN expression RPAREN block (ELSE block | ELSE ifStatementDef)?;

block ::= LBRACE blockStatement* RBRACE;

expression ::= LPAREN expression RPAREN | DECIMAL_LITERAL | HEX_LITERAL | BINARY_LITERAL | FLOAT_LITERAL | YEARS_LITERAL | MONTHS_LITERAL | DAYS_LITERAL | WEEKS_LITERAL | HOURS_LITERAL | MINUTES_LITERAL | SECONDS_LITERAL | DATE_TIME_LITERAL | NOW_LITERAL | DATE_LITERAL | TODAY_LITERAL | STRING_LITERAL_TRIPLE_SINGLE | STRING_LITERAL_TRIPLE_DOUBLE | STRING_LITERAL_SINGLE | STRING_LITERAL_DOUBLE | REGEX_LITERAL | TRUE | FALSE | NULL | validIdentifier | explicitGenericInvocationSuffix | expression (DOT | QDOT | HASH) (validIdentifier | functionCall | explicitGenericInvocation) | expression LBRACK expression? COLON expression? COLON expression RBRACK | expression LBRACK expression COLON RBRACK | expression LBRACK COLON expression RBRACK | expression LBRACK expression COLON expression RBRACK | expression LBRACK COLON RBRACK | expression LBRACK expression RBRACK | functionCall | expression (INC | DEC) | (ADD | SUB | INC | DEC) expression | (NOT | ALT_NOT) expression | expression (MUL | DIV | MOD) expression | expression (ADD | SUB) expression | expression (LE | GE | GT | LT) expression | expression (EQUAL | NOTEQUAL | ALT_NOTEQUAL | MATCH | MATCH_NOT) expression | expression (AND | CAND) expression | expression (OR | COR) expression | expression QUESTION expression COLON expression | expression (ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | MUL_ASSIGN | DIV_ASSIGN | MOD_ASSIGN) expression | lambdaParameters ARROW lambdaBody | IF expression THEN expression (ELSE expression)? | LBRACE (propertyAssignment (COMMA propertyAssignment)* COMMA?)? RBRACE | LBRACK (expression (COMMA expression)* COMMA?)? RBRACK;

validIdentifier ::= IDENTIFIER | FROM | TO | IN;

propertyAssignment ::= (STRING_LITERAL_TRIPLE_DOUBLE | STRING_LITERAL_TRIPLE_SINGLE | STRING_LITERAL_DOUBLE | STRING_LITERAL_SINGLE | validIdentifier) COLON expression;

functionDeclaration ::= FUNCTION validIdentifier formalParameters block;

formalParameters ::= LPAREN formalParameterList? RPAREN;

formalParameterList ::= formalParameter (COMMA formalParameter)*;

importAlias ::= validIdentifier;

formalParameter ::= validIdentifier;

qualifiedName ::= validIdentifier (DOT validIdentifier)*;

catchClause ::= CATCH LPAREN validIdentifier RPAREN block;

finallyBlock ::= FINALLY block;

expressionList ::= expression (COMMA expression)*;

functionCall ::= validIdentifier LPAREN expressionList? RPAREN;

lambdaParameters ::= validIdentifier | LPAREN formalParameterList? RPAREN | LPAREN validIdentifier (COMMA validIdentifier)* RPAREN;

lambdaBody ::= expression | block;

explicitGenericInvocation ::= explicitGenericInvocationSuffix;

explicitGenericInvocationSuffix ::= validIdentifier arguments;

arguments ::= LPAREN expressionList? RPAREN;

